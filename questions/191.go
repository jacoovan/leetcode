/*
191:位1的个数
leetcodeID : 191
leetcode地址 : https://leetcode-cn.com/problems/number-of-1-bits/
难度 : 简单

编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 &lsquo;1&rsquo; 的个数（也被称为<a href="https://baike.baidu.com/item/%e6%b1%89%e6%98%8e%e9%87%8d%e9%87%8f" target="_blank">汉明重量</a>）。

 

示例 1：

输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 &#39;1&#39;。


示例 2：

输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 &#39;1&#39;。


示例 3：

输入：11111111111111111111111111111101
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 &#39;1&#39;。

 

提示：

<ul>
	请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
	在 Java 中，编译器使用<a href="https://baike.baidu.com/item/二进制补码/5295284" target="_blank">二进制补码</a>记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。
</ul>

 

进阶:<br>
如果多次调用这个函数，你将如何优化你的算法？

 */
package main

import(
    "fmt"
)

func main(){
    var num uint32 = 7

    res := hammingWeight(num)

    fmt.Println(res)
}

func hammingWeight(num uint32) int {
    count := 0

    for num != 0 {
        num &= num - 1
        count++
    }

    return count
}