/*
190:颠倒二进制位
leetcodeID : 190
leetcode地址 : https://leetcode-cn.com/problems/reverse-bits/
难度 : 简单

颠倒给定的 32 位无符号整数的二进制位。

 

示例 1：

输入: 00000010100101000001111010011100
输出: 00111001011110000010100101000000
解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
      因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。

示例 2：

输入：11111111111111111111111111111101
输出：10111111111111111111111111111111
解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
      因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。

 

提示：

<ul>
	请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
	在 Java 中，编译器使用<a href="https://baike.baidu.com/item/二进制补码/5295284" target="_blank">二进制补码</a>记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
</ul>

 

进阶:<br>
如果多次调用这个函数，你将如何优化你的算法？

 */
package main

import "fmt"

func main(){
    var num uint32 = 4294967293

    res := reverseBits(num)

    fmt.Println(res)
}

func reverseBits(num uint32) uint32 {
    num = num << 16 | num >> 16
    num = (num & 0xFF00FF00 >> 8) | (num & 0x00FF00FF << 8)
    num = (num & 0xF0F0F0F0 >> 4) | (num & 0x0F0F0F0F << 4)
    num = (num & 0xCCCCCCCC >> 2) | (num & 0x33333333 << 2)
    num = (num & 0xAAAAAAAA >> 1) | (num & 0x55555555 << 1)
    return num
}